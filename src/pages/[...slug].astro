---
import { type CollectionEntry, getCollection } from 'astro:content';
import Prose from '../components/Prose.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import { slugify } from '@src/lib/utils';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: any) => ({
		params: { slug: post.slug },
		props: post
	}));
}
type Props = CollectionEntry<'blog'>;
const post = Astro.props;
const {
	data: { title, seoTitle, description, coverImage, pubDate, updatedDate, tags, coverVideo = null }
} = post;
const { Content, headings } = await post.render();
export const prerender = true;
---

<BaseLayout title={seoTitle || title} description={description} image={coverImage?.src || undefined}>
	<div class='container lg:flex gap-10'>
		<main class='overflow-hidden grow pt-28 pb-16 grid place-items-center'>
			<article>
				<Prose>
					<div>
						<div
							class='text-sm font-[500] mt-2 sm:mt-0 py-1 md:text-right flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center'
						>
							{
								(
									<div class='flex gap-2'>
										{(tags || [])?.map((tag: string) => (
											<a
												class='border border-skin-muted rounded-2xl
                          text-sm text-skin-base no-underline px-2 py-0.5
                          transition-all duration-700
                          '
												href={`/tags/${slugify(tag)}`}>
												{tag}
											</a>
										))}
									</div>
								)
							}
							<div>
								{
									updatedDate ? (
										<>
											Updated on{' '}
											<strong>
												<FormattedDate date={updatedDate} />
											</strong>
										</>
									) : (
										<>
											Published on{' '}
											<strong>
												<FormattedDate date={pubDate} />
											</strong>
										</>
									)
								}
							</div>
						</div>
					</div>
					<div class='py-3 overflow-hidden'>
						{coverImage && !coverVideo && <Image class='rounded-3xl w-full m-0 lg:mb-2' src={coverImage} alt={title} loading='eager' />}
						{
							coverVideo && (
								<div class='relative w-full h-96 mb-4 rounded-md overflow-hidden bg-skin-muted/20 backdrop-blur-md'>
									<video class='absolute inset-0 w-full h-full object-center not-prose' controls={false} autoplay muted loop>
										<source src={coverVideo} type='video/mp4' />
										Your browser does not support the video tag.
									</video>
								</div>
							)
						}
					</div>
					<Content />
				</Prose>
			</article>
		</main>
		<div class='shrink-0 w-[280px] pt-28 hidden md:block'>
			<TableOfContent headings={headings} />
		</div>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;

			// highlight the last scrolled-to: set everything inactive first
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			// then iterate backwards, on the first match highlight it and break
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
